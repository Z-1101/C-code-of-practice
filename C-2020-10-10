#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include <string.h>
#include <math.h>


//冒泡排序
int main(){
	int arr[] = { 9, 8, 7, 6, 5, 4, 3, 2, 1 };
	int sz = sizeof(arr) / sizeof(arr[0]);
	
	return 0;
}

//数组
//数组在内存中是连续存放的，并且是由低地址到高地址
//二维数组的行可以省略，但是列一定不能
//int main(){
//	int arr[] = {1,2,3,4,5,6};
//	int sz = sizeof(arr)/sizeof(arr[0]);
//	int i = 0;
//	for ( i = 0; i < sz; i++)
//	{
//		printf("%p\n", &arr[i]);//%p——>打印地址使用的
//	}
//	printf("%d\n", sz);
//	return 0;
//}

//遍历二维数组
//int main(){
//	int arr[3][4] = { { 1, 2, 3 }, { 4, 5 }, 6 };
//	for (int i = 0; i < 3; i++)
//	{
//		for (int j = 0; j < 4; j++){
//			printf("%d\t", arr[i][j]);
//		}
//		printf("\n");
//	}
//
//	return 0;
//}
//递归的主要思考方式：把大事化小
//递归的两个必要条件
//存在限制条件，当满足这个限制条件的时候，递归便不再继续。
//每次递归调用之后越来越接近这个限制条件。

//递归的例子
//void print(int num){
//	if (num > 9){
//		print(num/10);
//	}
//	printf("%d ", num%10);
//}
//int main(){
//	unsigned int num = 0;
//	scanf("%d", &num);
//
//	print(num);
//	
//	return 0;
//}

//模拟实现一个strlen函数
//方式一：使用变量
//int my_strlen(char* arr){
//	int count = 0;
//	while (*arr != '\0'){
//		arr++;
//		count++;
//	}
//	return count;
//}
//方式二：不使用变量，使用递归的方法
//把大事化小
//my_strlen("hello world!")
//1+my_strlen("ello world!")
//1+1+my_strlen("llo world!")
//.....
//1+1+1+...+1+my_strlen("")
//int my_strlen(char* arr){
//	if (*arr != '\0'){
//		return 1+ my_strlen(arr + 1);
//	}
//	else
//	{
//		return 0;
//	}
//
//}
//int main(){
//
//	char arr[] = "hello world!";
//	int sz = my_strlen(arr);
//	printf("数组长度%d\n", sz);
//
//	return 0;
//}

//递归与迭代
//例子：求n的阶乘
//方式一：循环的方式
//int factorial(int n){
//	int i = 0;
//	int ret = 1;
//	for ( i = 1; i <= n; i++)
//	{
//		ret *= i;
//	}
//	return ret;
//}

//方式二：递归的方式
//int factorial(int n){
//	int i = 1;
//	if(n>1){
//		return n*factorial(n-1);
//	}
//	else
//	{
//		return 1;
//	}
//}
//int main(){
//	int n = 0;
//	int ret = 0;
//	scanf("%d", &n);
//	ret =factorial(n);
//	printf("%d\n", ret);
//	return 0;
//}

//斐波那契数列：前两个数之和等于第三个数。（1 1 2 3 5 8 13 21 34 55...)
//方式一：递归的方式。缺点：重复计算过多，影响效率。
//int Fib(int n){
//	if (n <= 2){
//		return 1;
//	}
//	else
//	{
//		return Fib(n - 1) + Fib(n - 2);
//	}
//}

//方式二：while循环的方式。
//int Fib(int n){
//		int a = 1;
//		int b = 1;
//		int c = 1;
//		
//
//	while (n>2)
//	{
//		c = a + b;
//		a = b;
//		b = c;
//		n--;
//	}
//	return c;
//
//}
//
//int main(){
//	int n = 0;
//	int ret = 0;
//	scanf("%d", &n);
//	ret = Fib(n);
//	printf("%d\n", ret);
//	return 0;
//}

//递归即使有限制条件，也可能会出现栈溢出的现象

//帮别人的小测试
//int main(){
//	double x, s;
//	printf("input number:\n");
//	scanf("%lf", &x);
//	s = sin(x);
//	printf("sine of %lf is %lf \n", x, s);
//	return 0;
//}
//帮别人的小测试
//int main(){
//	int num1 = 0;
//	int num2 = 0;
//	int sum = 0;
//	scanf("%d%d", &num1, &num2);
//	sum = num1 + num2;
//	printf("sum=%d\n", sum);
//	return 0;
//}
//同上
//int main(){
//	int count = 0;
//	int i = 0;
//	for ( i = 1; i < 100; i++)
//	{
//		if (i % 10 == 9)
//			count++;
//		if (i/10==9)
//		{
//			count++;
//		}
//		if (i % 10 == 9 && i / 10 == 9){
//			count--;
//		}
//
//	}
//	printf("%d\n", count);
//}
