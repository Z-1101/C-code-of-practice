#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include <math.h>

//int getnum(int x){
//	for (int  j = 2; j <=sqrt(x); j++)//sqrt()是开平方根
//	{
//		if (x%j == 0){
//			return 0;
//		}    		
//	}return 1;
//}
//int is_leap_year(int y){
//	if (y % 4 == 0 && y % 100 != 0 || y % 400 == 0){
//		return 1;
//	}
//	else
//	{
//		return 0;
//	}
//
//}
//
//
//int main(){
//	int i = 0;
//	for ( i = 100; i <200; i++)
//	{
//		if (getnum(i) == 1){
//			printf("%d\t", i);
//		}
//	}
//}


//函数的调用
//调用一：传值调用
//函数的形参和实参分别占有不同内存块，对形参的修改不会影响实参。
//加法例子：
//int add(int x, int y){
//	int	z = x + y;
//	return z;
//}
//int main(){
//	int a = 10;
//	int b = 20;
//	int sum = 0;
//	sum = add(a, b);
//	printf("%d\n", sum);
//	return 0;
//}
//反例：交换a，b数值；
//void exchange1(int x, int y){
//	int temp = x;
//	x = y;
//	y = temp;
//}
//void exchange2(int *pa,int *pb){
//	int temp = *pa;
//	*pa = *pb;
//	*pb = temp;
//}
//int main(){
//	int a = 10;
//	int b = 20;
//	printf("交换之前，a=%d\tb=%d\n", a, b);//返回值：a=10	b=20
//	exchange1(a, b);
//	printf("第一种方式交换之后，a=%d\tb=%d\n", a, b);//返回值：a=10	b=20
//	exchange2(&a, &b);
//	printf("第二种方式交换之后，a=%d\tb=%d\n", a, b);//返回值：a=20 b=10
//	return 0;
//}

//调用二：传址调用
//传址调用是把函数外部创建变量的北村地址传递给函数参数的一种调用函数的方式。
//这种传参方式可以让函数外边的变量建立起正常的联系，也就是函数内部可以直接操着函数外部的变量。
//二分（折半）查找例子
int binary_search(int arr[], int k, int sz){
	int left = 0;
	int right = sz - 1;
	while (left <= right){
		int mid = (left + right) / 2;
		if (k < arr[mid]){
			right = mid - 1;
		}
		else if (k>arr[mid]){
			left = mid + 1;
		}
		else
		{
			return mid;
		}
	}
	return -1;
}
int main(){
	int arr[] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	int	k = 7;
	int sz = sizeof(arr) / sizeof(arr[0]);
	//sz必须提前设置，一位内下面传递的是数组arr首元素的地址
	int ret = binary_search(arr, k, sz);
	if (ret == -1){
		printf("找不到该元素！");
	}
	else
	{
		printf("该元素下表是：%d\n", ret);
	}
	return 0;
}




//函数的链式访问
//int main(){
//
//	printf("%d", printf("%d", printf("%d", 43)));//返回的是打印的字符的个数！！
//	return 0;
//}

//int main(){
//
//	return 0;
//}
