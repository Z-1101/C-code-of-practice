#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include <string.h>

//结构体
//是我们自己创造出来的的一种类型 - 是一个复杂对象
//例如：人 - 名字+身高+年龄+身份证号……
//例如：书 - 书名+作者+定价+出版社名……
//创建一个结构体类型
struct Book
{
	char name[30];//C语言程序设计
	short price;//55
	
};

int main(){
	//利用结构体类型 - 创建一个该类型的结构体变量
	struct Book b1 = { "C语言程序设计",55 };
	//printf("书名：%s\n", b1.name);
	//printf("价格：%d\n", b1.price);
	//更改价格：
	//b1.price = 15;
	//printf("促销价格：%d元\n", b1.price);
	//更改名字（注意！和更改价格不一样！！！）
	//b1.name = "C++";//报错！！！
	//strcpy(b1.name,"C++");
	//strcpy - string copy -字符串拷贝-库文件-string.h
	//printf("书名：%s\n", b1.name);

	//利用指针打印出书名和价格
	//方式一：（较麻烦）结构体变量.成员
	struct Book* pb = &b1;
	printf("书名：%s\n", (*pb).name);
	printf("价格：%d\n", (*pb).price);
	//方式二：（较简便）结构体指针->成员
	printf("书名：%s\n", pb->name);
	printf("价格：%d\n", pb->price);

	return 0;  
}



//int main(){
//
//	double z = 3.14;
//	double* pz = &z;
//	printf("%lf\n", z);
//	*pz = 11.01;
//	printf("%lf\n", z);
//	printf("%lf\n", *pz);
//	printf("%d\n", sizeof(z));//8
//	printf("%d\n", sizeof(pz));//4 不是8，因为是指针，仅仅是个地址
//
//	int a = 10;
//	int* p= &a; //取地址
//	//有一种变量是用来存放地址的--指针变量
//	printf("%p\n", &a);//%p是取地址的
//	printf("%p\n", &p);//p是一个变量 - int指针变量
//	printf("%p\n", &*p);//相当于  *p = a；
//	*p = 20;//* - 解引用操作符 ,作用是改变地址a里面的值
//	printf("%p\n", &*p);
//	printf("a=%d\n", a);//打印结果：a=20
//
//	char ch = 'w';
//	char* pc = &ch;//pc是一个变量 - char指针变量
//	*pc = 'a';
//	printf("%c\n", ch);
//	printf("%d\n", sizeof(pc));
//	return 0;
//}


//#define 定义标识符常量
//#define 可以定义宏——带参数

////函数的实现
//int Max(int x, int y){
//	if (x>y)
//	{
//		return x;
//	}
//	else
//	{
//		return y;
//	}
//}
////宏的定义
//#define MAX(X,Y)(X>Y?X:Y)
//int main(){
//	int a = 10;
//	int b = 20;
//	//函数方式
//	int max = Max(a, b); 
//	printf("max=%d\n", max);
//	//宏的方式
//	max = MAX(a,b);
//	printf("max=%d\n", max);
//	return 0;
//}

//#define MAX 100
//int main(){
//	int a = MAX;
//	printf("a=%d\n", a);
//	return 0;
//}


//static修饰的变量能改变
//static 修饰局部变量
//局部变量的生命周期变长
//static修饰全局变量 
//改变了变量的作用域，让静态的全局变量只能在自己所在的源文件内部使用
//static 修饰函数
//不准确的说法：改变了函数的作用域
//static修饰的函数改变了函数的连接属性。
//正常的函数是有外部连接属性
//加上static，外部连接属性——》内部连接属性

int g_val = 2020;//全局变量
//static int g_val = 2020;//静态变量

//定义一个函数

//staitic int Add(int x, int y){//static  修饰
//	int z = x + y;
//	return z;
//}
int Add(int x, int y){
	int z = x + y;
	return z;
}

//声明外部函数
//extern int Add(int ,int );
//int main(){
//	int a = 2;
//	int b = 3;
//	int sum = Add(a, b);
//	printf("sum=%d\n", sum);
//	return 0;
//}

//int main(){
//	//extern - 此关键字是声明外部符号的
//	extern int g_val;//只能使用其他项目下的全局变量，不能其他项目下使用static修饰的
//	printf("g_val=%d\n", g_val);
//
//	return 0;
//}

//void test(){
//	
//	static int a = 1;//a 是一个静态的局部变量 输出结果是2 3 4 5 6
//	//int a = 1;  //输出结果 五个a=2;
//	a++;
//	printf("a=%d\n", a);
//}
//
//int main(){
//	int i = 0;
//	while (i<5)
//	{
//		test();
//		i++;
//
//	}
//
//	return 0;
//
//}


//int main(){
//	int a = 10;//局部变量，也叫自动变量。其实局部变量前都省略一个关键字auto
//	
//	register int b = 20;//建议（仅仅是建议）把b定义成寄存器变量
//
//	int c = 30;
//	c = -30;
//	//int 定义的变量是有符号的 signed有符号的
//	//signed int 等价于 int
//	//unsigned 无符号数的 
//	unsigned int num = 0;
//	//num 被称为无符号数，无符号位的话就没有正负之分，永远都是正数
//
//	//typedef -类型定义 - 类型重定义
//	typedef unsigned int u_int;//给unsigned int重新定义一个名字(小名)
//	u_int d = 20;
//
//
//	return 0;
//}
